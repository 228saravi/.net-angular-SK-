// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SK.Database;

namespace SK.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20181030111229_TestTimeStamp2")]
    partial class TestTimeStamp2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SK.Database.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<long>("ConnectionId");

                    b.Property<string>("Direction");

                    b.Property<DateTimeOffset?>("ReceiveTime");

                    b.Property<DateTimeOffset>("SendTime");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("SK.Database.City", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new { Id = "Msk", Name = "Москва" },
                        new { Id = "Spb", Name = "Санкт-Петербург" }
                    );
                });

            modelBuilder.Entity("SK.Database.ClothingSize", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("ClothingSizes");

                    b.HasData(
                        new { Id = "XS", Name = "XS", Rank = 1 },
                        new { Id = "S", Name = "S", Rank = 2 },
                        new { Id = "M", Name = "M", Rank = 3 },
                        new { Id = "L", Name = "L", Rank = 4 },
                        new { Id = "XL", Name = "XL", Rank = 5 },
                        new { Id = "XXL", Name = "XXL", Rank = 6 }
                    );
                });

            modelBuilder.Entity("SK.Database.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutCompanyHtml");

                    b.Property<string>("CityId");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("LogoImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("ThumbnailImageUrl");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SK.Database.Connection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovingDate");

                    b.Property<string>("ConnectionStatus");

                    b.Property<string>("ConnectionType");

                    b.Property<long>("ExpertProfileId");

                    b.Property<long?>("FeedbackForCompanyId");

                    b.Property<long?>("FeedbackForExpertId");

                    b.Property<DateTime>("RequestingDate");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ExpertProfileId");

                    b.HasIndex("FeedbackForCompanyId")
                        .IsUnique()
                        .HasFilter("[FeedbackForCompanyId] IS NOT NULL");

                    b.HasIndex("FeedbackForExpertId")
                        .IsUnique()
                        .HasFilter("[FeedbackForExpertId] IS NOT NULL");

                    b.HasIndex("VacancyId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("SK.Database.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutEventHtml");

                    b.Property<string>("Address");

                    b.Property<string>("CityId");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int?>("EstimatedAverageCheck");

                    b.Property<int?>("EstimatedGuestsCount");

                    b.Property<string>("EventFormatId");

                    b.Property<string>("EventTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("LogoImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("SegmentId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<bool>("WithAccomodation");

                    b.Property<bool>("WithtDelivery");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EventFormatId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SK.Database.EventFormat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("EventFormats");

                    b.HasData(
                        new { Id = "Furshet", Name = "Фуршет", Rank = 0 },
                        new { Id = "MainCourses", Name = "Основные курсы", Rank = 0 },
                        new { Id = "Smorgasbord", Name = "Шведский стол", Rank = 0 },
                        new { Id = "Сocktail", Name = "Велком / коктейль", Rank = 0 },
                        new { Id = "Barbecue", Name = "Барбекю", Rank = 0 },
                        new { Id = "Replacement", Name = "Подмена в заведение", Rank = 0 }
                    );
                });

            modelBuilder.Entity("SK.Database.EventType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new { Id = "Corporative", Name = "Корпоратив", Rank = 0 },
                        new { Id = "Sport", Name = "Спортивное мероприятие", Rank = 0 },
                        new { Id = "BusinessMeeting", Name = "Деловая встреча", Rank = 0 },
                        new { Id = "Wedding", Name = "Свадьба", Rank = 0 },
                        new { Id = "Birthday", Name = "День Рождения", Rank = 0 },
                        new { Id = "NewYear", Name = "Новый Год", Rank = 0 },
                        new { Id = "Tourists", Name = "Туристы", Rank = 0 },
                        new { Id = "Training", Name = "Тренинг", Rank = 0 },
                        new { Id = "StagParty", Name = "Мальчишник / Девишник", Rank = 0 },
                        new { Id = "FamilyCelebration", Name = "Семейное торжество", Rank = 0 },
                        new { Id = "Graduation", Name = "Выпускной", Rank = 0 },
                        new { Id = "Formal", Name = "Официальный приём", Rank = 0 }
                    );
                });

            modelBuilder.Entity("SK.Database.ExperienceOption", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("ExperienceOptions");

                    b.HasData(
                        new { Id = "Month6", Name = "до 6 мес.", Rank = 0 },
                        new { Id = "Month6_Year2", Name = "от 6 мес. до 2 лет", Rank = 0 },
                        new { Id = "Year2", Name = "от 2 лет", Rank = 0 }
                    );
                });

            modelBuilder.Entity("SK.Database.ExpertDocument", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ExpertDocuments");

                    b.HasData(
                        new { Id = "Passport", Name = "Паспорт" },
                        new { Id = "MedicalBook", Name = "Медицинская книжка" },
                        new { Id = "WorkPermit", Name = "Разрешение на работу в РФ" }
                    );
                });

            modelBuilder.Entity("SK.Database.ExpertProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutMeHtml");

                    b.Property<string>("CityId");

                    b.Property<string>("ClothingSizeId");

                    b.Property<string>("ExperienceOptionId");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("PhotoImageUrl");

                    b.Property<int?>("RatePerHour");

                    b.Property<string>("SpecialityId");

                    b.Property<string>("SpecializationId");

                    b.Property<string>("ThumbnailImageUrl");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClothingSizeId");

                    b.HasIndex("ExperienceOptionId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ExpertProfiles");
                });

            modelBuilder.Entity("SK.Database.ExpertProfileDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpertDocumentId");

                    b.Property<long>("ExpertProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ExpertDocumentId");

                    b.HasIndex("ExpertProfileId");

                    b.ToTable("ExpertProfileDocument");
                });

            modelBuilder.Entity("SK.Database.ExpertProfileLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ExpertProfileId");

                    b.Property<string>("LanguageId");

                    b.HasKey("Id");

                    b.HasIndex("ExpertProfileId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ExpertProfileLanguage");
                });

            modelBuilder.Entity("SK.Database.ExpertProfileSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ExpertProfileId");

                    b.Property<string>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("ExpertProfileId");

                    b.HasIndex("SkillId");

                    b.ToTable("ExpertProfileSkill");
                });

            modelBuilder.Entity("SK.Database.FeedbackForCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentHtml");

                    b.Property<int>("Rating");

                    b.HasKey("Id");

                    b.ToTable("FeedbackForCompany");
                });

            modelBuilder.Entity("SK.Database.FeedbackForExpert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentHtml");

                    b.Property<int>("Rating");

                    b.HasKey("Id");

                    b.ToTable("FeedbackForExpert");
                });

            modelBuilder.Entity("SK.Database.Language", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new { Id = "Ru", Name = "Русский" },
                        new { Id = "En", Name = "Английский" }
                    );
                });

            modelBuilder.Entity("SK.Database.Segment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("Segments");

                    b.HasData(
                        new { Id = "Democratic", Name = "Демократичный", Rank = 0 },
                        new { Id = "Middle", Name = "Стандарт", Rank = 1 },
                        new { Id = "Premium", Name = "Премиум", Rank = 2 }
                    );
                });

            modelBuilder.Entity("SK.Database.Skill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName");

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.Property<string>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Skills");

                    b.HasData(
                        new { Id = "Cook_RussianCuisine", GroupName = "Кухня", Name = "Русская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_UsbekCuisine", GroupName = "Кухня", Name = "Узбекская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_FranceCuisine", GroupName = "Кухня", Name = "Французская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_EuropeCuisine", GroupName = "Кухня", Name = "Европейская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_SpainCuisine", GroupName = "Кухня", Name = "Испанская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_BelgiumCuisine", GroupName = "Кухня", Name = "Бельгийская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_GermanCuisine", GroupName = "Кухня", Name = "Немецкая", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_ChinaCuisine", GroupName = "Кухня", Name = "Китайская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_UsaCuisine", GroupName = "Кухня", Name = "Американская", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Cook_NewWorldCuisine", GroupName = "Кухня", Name = "Нового света", Rank = 2000, SpecialityId = "Cook" },
                        new { Id = "Barman_Сocktail", GroupName = "Напитки", Name = "Миксология/коктейли", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Tea", GroupName = "Напитки", Name = "Чай", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Coffee", GroupName = "Напитки", Name = "Кофе", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_SoftDrinks", GroupName = "Напитки", Name = "Безалкогольные напитки", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_SoftCocktails", GroupName = "Напитки", Name = "Безалкогольные коктейли/смузи", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Bear", GroupName = "Напитки", Name = "Пиво", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Wine", GroupName = "Напитки", Name = "Вино", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_StrongAlcohol", GroupName = "Напитки", Name = "Крепкий алкоголь", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Tinctures", GroupName = "Напитки", Name = "Настойки", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Aperitifs", GroupName = "Напитки", Name = "Апперитивы", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Digestives", GroupName = "Напитки", Name = "Дижестивы", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Barman_Sommelier", GroupName = "Напитки", Name = "Навыки сомелье", Rank = 2000, SpecialityId = "Barman" },
                        new { Id = "Waiter_RussianCuisine", GroupName = "Кухня", Name = "Русская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_UsbekCuisine", GroupName = "Кухня", Name = "Узбекская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_FranceCuisine", GroupName = "Кухня", Name = "Французская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_EuropeCuisine", GroupName = "Кухня", Name = "Европейская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_SpainCuisine", GroupName = "Кухня", Name = "Испанская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_BelgiumCuisine", GroupName = "Кухня", Name = "Бельгийская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_GermanCuisine", GroupName = "Кухня", Name = "Немецкая", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_ChinaCuisine", GroupName = "Кухня", Name = "Китайская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_UsaCuisine", GroupName = "Кухня", Name = "Американская", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_NewWorldCuisine", GroupName = "Кухня", Name = "Нового света", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Сocktail", GroupName = "Напитки", Name = "Миксология/коктейли", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Tea", GroupName = "Напитки", Name = "Чай", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Coffee", GroupName = "Напитки", Name = "Кофе", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_SoftDrinks", GroupName = "Напитки", Name = "Безалкогольные напитки", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_SoftCocktails", GroupName = "Напитки", Name = "Безалкогольные коктейли/смузи", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Bear", GroupName = "Напитки", Name = "Пиво", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Wine", GroupName = "Напитки", Name = "Вино", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_StrongAlcohol", GroupName = "Напитки", Name = "Крепкий алкоголь", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Tinctures", GroupName = "Напитки", Name = "Настойки", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Aperitifs", GroupName = "Напитки", Name = "Апперитивы", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Digestives", GroupName = "Напитки", Name = "Дижестивы", Rank = 2000, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Sommelier", GroupName = "Напитки", Name = "Навыки сомелье", Rank = 2000, SpecialityId = "Waiter" }
                    );
                });

            modelBuilder.Entity("SK.Database.Speciality", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new { Id = "Cook", Name = "Повар", Rank = 0 },
                        new { Id = "Waiter", Name = "Официант", Rank = 0 },
                        new { Id = "Barman", Name = "Бармен", Rank = 0 }
                    );
                });

            modelBuilder.Entity("SK.Database.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Rank");

                    b.Property<string>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new { Id = "Cook_HotShop", Name = "Повар горячего цеха", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_ColdShop", Name = "Повар холодного цеха", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_AllInOne", Name = "Универсал", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_Preparer", Name = "Заготовщик", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_Confectioner", Name = "Кондитер", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_Assistant", Name = "Помощник повара", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_Butcher", Name = "Мясник", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_Foreman", Name = "Бригадир", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_SousChef", Name = "Су-Шеф", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_Chef", Name = "Шеф", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_SushiMaker", Name = "Сушист", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Cook_PizzaMaker", Name = "Пиццмейкер", Rank = 1000, SpecialityId = "Cook" },
                        new { Id = "Barman_Assistant", Name = "Помощник бармена", Rank = 0, SpecialityId = "Barman" },
                        new { Id = "Barman_Middle", Name = "Бармен", Rank = 0, SpecialityId = "Barman" },
                        new { Id = "Barman_Senior", Name = "Старший бармен", Rank = 0, SpecialityId = "Barman" },
                        new { Id = "Waiter_Assistant", Name = "Помощник официанта", Rank = 0, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Middle", Name = "Официант", Rank = 0, SpecialityId = "Waiter" },
                        new { Id = "Waiter_Senior", Name = "Старший официант", Rank = 0, SpecialityId = "Waiter" }
                    );
                });

            modelBuilder.Entity("SK.Database.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTimeOffset?>("LastSeenTime");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SK.Database.Vacancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutVacancyHtml");

                    b.Property<int?>("Amount");

                    b.Property<long>("EventId");

                    b.Property<string>("ExperienceOptionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("LanguageId");

                    b.Property<int?>("RatePerHour");

                    b.Property<string>("SpecialityId");

                    b.Property<string>("SpecializationId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("WorkingHours");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ExperienceOptionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("SK.Database.VacancyDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpertDocumentId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ExpertDocumentId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyDocument");
                });

            modelBuilder.Entity("SK.Database.VacancyLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyLanguage");
                });

            modelBuilder.Entity("SK.Database.VacancySkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancySkill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SK.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SK.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SK.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SK.Database.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SK.Database.ChatMessage", b =>
                {
                    b.HasOne("SK.Database.Connection", "Connection")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SK.Database.Company", b =>
                {
                    b.HasOne("SK.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SK.Database.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("SK.Database.Company", "UserId");
                });

            modelBuilder.Entity("SK.Database.Connection", b =>
                {
                    b.HasOne("SK.Database.ExpertProfile", "ExpertProfile")
                        .WithMany("Connections")
                        .HasForeignKey("ExpertProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SK.Database.FeedbackForCompany", "FeedbackForCompany")
                        .WithOne("Connection")
                        .HasForeignKey("SK.Database.Connection", "FeedbackForCompanyId");

                    b.HasOne("SK.Database.FeedbackForExpert", "FeedbackForExpert")
                        .WithOne("Connection")
                        .HasForeignKey("SK.Database.Connection", "FeedbackForExpertId");

                    b.HasOne("SK.Database.Vacancy", "Vacancy")
                        .WithMany("Connections")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SK.Database.Event", b =>
                {
                    b.HasOne("SK.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SK.Database.Company", "Company")
                        .WithMany("Events")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SK.Database.EventFormat", "EventFormat")
                        .WithMany()
                        .HasForeignKey("EventFormatId");

                    b.HasOne("SK.Database.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");

                    b.HasOne("SK.Database.Segment", "Segment")
                        .WithMany("Events")
                        .HasForeignKey("SegmentId");
                });

            modelBuilder.Entity("SK.Database.ExpertProfile", b =>
                {
                    b.HasOne("SK.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SK.Database.ClothingSize", "ClothingSize")
                        .WithMany()
                        .HasForeignKey("ClothingSizeId");

                    b.HasOne("SK.Database.ExperienceOption", "ExperienceOption")
                        .WithMany()
                        .HasForeignKey("ExperienceOptionId");

                    b.HasOne("SK.Database.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId");

                    b.HasOne("SK.Database.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.HasOne("SK.Database.User", "User")
                        .WithOne("ExpertProfile")
                        .HasForeignKey("SK.Database.ExpertProfile", "UserId");
                });

            modelBuilder.Entity("SK.Database.ExpertProfileDocument", b =>
                {
                    b.HasOne("SK.Database.ExpertDocument", "ExpertDocument")
                        .WithMany()
                        .HasForeignKey("ExpertDocumentId");

                    b.HasOne("SK.Database.ExpertProfile", "ExpertProfile")
                        .WithMany("ExpertProfileDocuments")
                        .HasForeignKey("ExpertProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SK.Database.ExpertProfileLanguage", b =>
                {
                    b.HasOne("SK.Database.ExpertProfile", "ExpertProfile")
                        .WithMany("ExpertProfileLanguages")
                        .HasForeignKey("ExpertProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SK.Database.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("SK.Database.ExpertProfileSkill", b =>
                {
                    b.HasOne("SK.Database.ExpertProfile", "ExpertProfile")
                        .WithMany("ExpertProfileSkills")
                        .HasForeignKey("ExpertProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SK.Database.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");
                });

            modelBuilder.Entity("SK.Database.Skill", b =>
                {
                    b.HasOne("SK.Database.Speciality", "Speciality")
                        .WithMany("Skills")
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("SK.Database.Specialization", b =>
                {
                    b.HasOne("SK.Database.Speciality", "Speciality")
                        .WithMany("Specializations")
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("SK.Database.Vacancy", b =>
                {
                    b.HasOne("SK.Database.Event", "Event")
                        .WithMany("Vacancies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SK.Database.ExperienceOption", "ExperienceOption")
                        .WithMany()
                        .HasForeignKey("ExperienceOptionId");

                    b.HasOne("SK.Database.Language")
                        .WithMany("Vacancies")
                        .HasForeignKey("LanguageId");

                    b.HasOne("SK.Database.Speciality", "Speciality")
                        .WithMany("Vacancies")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("SK.Database.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");
                });

            modelBuilder.Entity("SK.Database.VacancyDocument", b =>
                {
                    b.HasOne("SK.Database.ExpertDocument", "ExpertDocument")
                        .WithMany()
                        .HasForeignKey("ExpertDocumentId");

                    b.HasOne("SK.Database.Vacancy", "Vacancy")
                        .WithMany("VacancyDocuments")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SK.Database.VacancyLanguage", b =>
                {
                    b.HasOne("SK.Database.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("SK.Database.Vacancy", "Vacancy")
                        .WithMany("VacancyLanguages")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SK.Database.VacancySkill", b =>
                {
                    b.HasOne("SK.Database.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.HasOne("SK.Database.Vacancy", "Vacancy")
                        .WithMany("VacancySkills")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
